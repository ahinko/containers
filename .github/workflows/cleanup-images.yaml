name: Cleanup Old Images

on:
  # schedule:
  #  - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:  # Allow manual trigger

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Login to GitHub
        run: gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

      - name: Get app names
        id: apps
        run: |
          APPS=$(find apps -maxdepth 1 -mindepth 1 -type d -exec basename {} \;)
          echo "apps<<EOF" >> $GITHUB_OUTPUT
          echo "$APPS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Cleanup old images
        run: |
          # Read apps into an array, handling newlines properly
          mapfile -t app_array <<< "${{ steps.apps.outputs.apps }}"

          for app in "${app_array[@]}"; do
            echo "Processing $app..."

            # Get all versions of the package
            versions=$(gh api /user/packages/container/$app/versions)

            # Process each version
            echo "$versions" | jq -c '.[]' | while read -r version; do
              created_at=$(echo "$version" | jq -r '.created_at')
              version_id=$(echo "$version" | jq -r '.id')
              version_name=$(echo "$version" | jq -r '.name')

              # Calculate days since creation
              created_date=$(date -d "$created_at" +%s)
              current_date=$(date +%s)
              days_old=$(( (current_date - created_date) / 86400 ))

              # Skip if version is less than 180 days old
              if [ $days_old -lt 180 ]; then
                echo "Skipping $version_name (created $days_old days ago)"
                continue
              fi

              # Skip if version is 'rolling'
              if [ "$version_name" = "rolling" ]; then
                echo "Skipping rolling tag"
                continue
              fi

              echo "Deleting $version_name (created $days_old days ago)"
              # gh api -X DELETE /user/packages/container/$app/versions/$version_id
            done
          done
