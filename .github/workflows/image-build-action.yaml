---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Image Build

on:
  workflow_call:
    inputs:
      app:
        type: string
        description: The name of the app to build
        required: true
      version:
        type: string
        description: The version of the app to build
        required: true
      release:
        type: boolean
        description: Whether to release the app
        required: true

jobs:
  build:
    name: Build ${{ inputs.app }} (${{ matrix.platform }})
    runs-on: ${{ matrix.platform == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    strategy:
      matrix:
        platform: ["amd64"]
      fail-fast: false
    outputs:
      amd64: ${{ steps.digest.outputs.amd64 }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Build Image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        id: build
        with:
          build-args: |
            VENDOR=${{ github.repository_owner }}
            VERSION=${{ inputs.version }}
            REVISION=${{ github.sha }}
          cache-from: |
            ${{ format('type=registry,ref=ghcr.io/{0}/build_cache:{1}-{2},mode=max', github.repository_owner, inputs.app, matrix.platform) }}
          cache-to: |
            ${{ inputs.release && format('type=registry,ref=ghcr.io/{0}/build_cache:{1}-{2}', github.repository_owner, inputs.app, matrix.platform) || '' }}
          labels: |
            org.opencontainers.image.title=${{ inputs.app }}
            org.opencontainers.image.url=https://ghcr.io/${{ github.repository_owner }}/${{ inputs.app }}
            org.opencontainers.image.version=${{ inputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
          outputs: |
            type=docker
            ${{ inputs.release && format('type=image,name=ghcr.io/{0}/{1},push-by-digest=true,name-canonical=true,push=true', github.repository_owner, inputs.app) || '' }}
          context: ./apps/${{ inputs.app }}
          platforms: linux/${{ matrix.platform }}
          provenance: false

      - if: ${{ inputs.release }}
        name: Export Digest
        id: digest
        run: |
          echo "${{ matrix.platform }}=${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT

  release:
    if: ${{ inputs.release }}
    needs: build
    name: Release ${{ inputs.app }}
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.digest.outputs.digest }}
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Setup Node
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: 22.x

      - name: Install Semver
        run: npm install semver

      - name: Determine Definitive Version
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        id: version
        with:
          script: |
            const semver = require('semver');

            function sanitizeInputVersion(version) {
                // Replace dash with dot for versions like "17.5-1"
                version = version.replace(/(\d+)-(\d+)/, '$1.$2');
                // Remove any remaining pre-release suffixes
                return version.split('-')[0];
            }

            const version = '${{ inputs.version }}';
            const sanitizedVersion = sanitizeInputVersion(version);
            const validSemverRegex = /^v?(\d+(\.\d+)?(\.\d+)?)/;
            const date = new Date();
            const parsedVersion = validSemverRegex.exec(sanitizedVersion);
            const validSemver = parsedVersion !== null;

            const parsedSemver = validSemver ? semver.coerce(parsedVersion[0]) : null;
            const outputVersion = validSemver
                ? `${parsedSemver.major}.${parsedSemver.minor}.${parsedSemver.patch}`
                : `${date.getFullYear()}.${date.getMonth() + 1}.${date.getDate()}`;

            core.setOutput('version', outputVersion);
            core.setOutput('validSemver', validSemver);
            core.setOutput('sanitizedInputVersion', sanitizedVersion);

      - name: Build Meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        id: meta
        with:
          flavor: latest=false
          images: ghcr.io/${{ github.repository_owner }}/${{ inputs.app }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.validSemver }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.validSemver }}
            type=raw,value=${{ steps.version.outputs.sanitizedInputVersion }},enable=${{ steps.version.outputs.validSemver }}
            type=raw,value=rolling

      - name: Push Images
        uses: Noelware/docker-manifest-action@b33ab348026b120a895167160f5605b0197f0862 # 0.4.3
        id: push
        with:
          inputs: ${{ join(fromJSON(steps.meta.outputs.json).tags, ',') }}
          images: >-
            ghcr.io/${{ github.repository_owner }}/${{ inputs.app }}@${{ needs.build.outputs.amd64 }},
          push: true

      - name: Export Digest
        id: digest
        run: |
          digest=$(echo "${{ steps.push.outputs.images }}" | grep -oP 'sha256:[^, ]+' | head -n1)
          echo "digest=${digest}" >> $GITHUB_OUTPUT
