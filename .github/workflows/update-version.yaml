name: Update App Version

on:
  push:
    branches:
      - main
    paths:
      - 'apps/buoy/Dockerfile'
      # Add more specific Dockerfile paths here as needed

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Detect changed apps
        id: changes
        uses: tj-actions/changed-files@v41
        with:
          files: ${{ join(github.event.paths, '\n') }}

      - name: Set build matrix
        id: set-matrix
        run: |
          if [ -n "${{ steps.changes.outputs.all_changed_files }}" ]; then
            CHANGED_APPS=$(echo "${{ steps.changes.outputs.all_changed_files }}" | grep -o "apps/[^/]*" | sort -u | cut -d/ -f2)
            APPS_JSON=$(echo "$CHANGED_APPS" | jq -R -s 'split("\n") | map(select(length > 0))')
            echo "matrix={\"app\":$APPS_JSON}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"app\":[]}" >> $GITHUB_OUTPUT
          fi

  update-version:
    needs: detect-changes
    if: ${{ fromJson(needs.detect-changes.outputs.matrix).app[0] != null }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          ref: main

      - name: Get current version
        id: version
        run: |
          # Get version and store original format
          VERSION_LINE=$(grep -E "^version:" apps/${{ matrix.app }}/metadata.yaml)
          CURRENT_VERSION=$(echo "$VERSION_LINE" | sed -E 's/^version:\s*(.*)\s*$/\1/')
          HAS_V_PREFIX=false
          if [[ $CURRENT_VERSION == v* ]]; then
            HAS_V_PREFIX=true
            CURRENT_VERSION=${CURRENT_VERSION#v}
          fi

          # Increment version
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

          # Add v prefix if original had it
          if [ "$HAS_V_PREFIX" = true ]; then
            NEW_VERSION="v$NEW_VERSION"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"

      - name: Update version in metadata
        run: |
          sed -i "s/^version:.*/version: ${{ steps.version.outputs.new_version }}/" apps/${{ matrix.app }}/metadata.yaml

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: bump ${{ matrix.app }} version to ${{ steps.version.outputs.new_version }}"
          title: "chore: bump ${{ matrix.app }} version to ${{ steps.version.outputs.new_version }}"
          body: |
            Automated version bump for ${{ matrix.app }}

            - Current version: $(grep -E "^version:" apps/${{ matrix.app }}/metadata.yaml | sed -E 's/^version:\s*(.*)\s*$/\1/')
            - New version: ${{ steps.version.outputs.new_version }}
          branch: update-${{ matrix.app }}-to-${{ steps.version.outputs.new_version }}
          base: main
          labels: |
            automated pr
            version bump
          delete-branch: true
